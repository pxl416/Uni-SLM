# data
active_datasets: [CSL_News]   # 可选，不写则默认全部启用

datasets:
  CSL_News:
    rgb_dirs: data/mini_CSL_News/rgb
    pose_dirs: data/mini_CSL_News/pose
    train_label_paths: data/mini_CSL_News/train_label.json
    val_label_paths: data/mini_CSL_News/val_label.json
    test_label_paths: data/mini_CSL_News/test_label.json

  BOBSL:
    rgb_dirs: data/bobsl_ds/rgb
    pose_dirs: data/mini_bobsl_ds/pose
    train_label_paths: data/mini_bobsl_ds/train_label.json
    val_label_paths: data/mini_bobsl_ds/val_label.json
    test_label_paths: data/mini_bobsl_ds/test_label.json

  CSL_Daily:
    rgb_dirs: data/mini_CLS_Daily/rgb
    pose_dirs: data/mini_CLS_Daily/pose
    train_label_paths: data/mini_CLS_Daily/train_label.json
    val_label_paths: data/mini_CLS_Daily/val_label.json
    test_label_paths: data/mini_CLS_Daily/test_label.json


augmentation:
  temporal:
    max_frames: 64
    strategy:
      mode: "mixed"
      weights: { uniform: 0.4, random: 0.4, dense: 0.2 }
    time_mask_p: 0.0      # ← 若要启用时间遮挡，>0 如 0.15
    time_mask_ratio: 0.1  # ← 被遮挡比例
  rgb:
    color_p: 0.8          # ← 原来的 prob 建议改名为 color_p（或在代码中映射 prob→color_p）
    hflip_p: 0.3
    blur_p: 0.2
    erase_p: 0.0
    erase_scale: [0.02, 0.1]
    color_jitter: { b: 0.2, c: 0.2, s: 0.1, h: 0.05 }
  pose:
    conf_thr: 0.3
    noise_level: 0.0      # 开轻噪声时可设 0.5~1.5（像素尺度，取决于输入）

  spatial:
    use_bbox: false        # ← 默认用全图裁剪，flip 测试更稳；后续再开 bbox
    min_bbox_ratio: 0.25   # ← 开 bbox 时，小于此比例则退回全图
  output:
    size: [224, 224]       # ← 统一输出分辨率（等价于你的 image_size）
  text:
    prob: 0.0
    modes: ["noise"]
seed: 3407



# model
mode: "pretrain"

Encoders:
  pose: { name: "PoseEncoder", output_dim: 512 }
  rgb:  { name: "RGBEncoder",  output_dim: 512 }
  text: { name: "TextEncoder", model_path: "sentence-transformers/all-MiniLM-L6-v2", output_dim: 384 }

Pretraining:
  task: "contrastive"
  loss: "infoNCE"
  temperature: 0.07
  projection_dim: 256

Evaluation:
  retrieval:   { enabled: true, head: "RetrievalHead", rgb_in: 512, text_in: 384, proj_dim: 256 }
  recognition: { enabled: true, head: "RecognitionHeadCTC", in_dim: 512, num_classes: 2000 }
  translation: { enabled: true, head: "TranslationHeadMT5", in_dim: 512, vocab_size: 30000 }

Fusion:
  pose_rgb:  { enabled: false }
  pose_text: { enabled: false }
  rgb_text:  { enabled: false }

Training:
  gradient_clip: 1.0

# trainer
wandb:
  use: True  # 是否启用 wandb

  api_key: # ${WANDB_API_KEY}  # api_key: ${0c563568ac7ebb0941d93b54803b7101d16280b6}
  run_name: multi-ds0928 # ${WANDB_RUN_NAME}
  project: SignLanguage-multi-ds # ${WANDB_PROJECT}  # "SignLanguage-Retrieval"

save_dir: checkpoints/multi-ds0928 # PATH # "checkpoints/retrieval_0801"

Evaluation:
  retrieval:
    enabled: true
    proj_dim: 256
    temperature: 0.07
  recognition:
    enabled: true
    num_classes: 2000      # 按你的字表大小改
    hidden_dim: 512
    num_layers: 2
    dropout: 0.1
    blank_id: 0            # 或数据集的 CTC blank id
  translation:
    enabled: true
    mt5_path: google/mt5-base
    hidden_dim: 768
    label_smoothing: 0.1
    lang: Chinese
    max_length: 128

training:
  epochs: 20
  eval_freq: 1
  batch_size: 4
  learning_rate: 1e-4
  epochs: 20
  grad_clip: 1.0

optimizer:
  type: "adam"
  scheduler: "cosine"